// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ServeRoute.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//定义传输过程用到的数据类型,数字代表内部成员序号
type Name struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Name) Reset()         { *m = Name{} }
func (m *Name) String() string { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()    {}
func (*Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e8d50a95d34bb2, []int{0}
}

func (m *Name) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Name.Unmarshal(m, b)
}
func (m *Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Name.Marshal(b, m, deterministic)
}
func (m *Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Name.Merge(m, src)
}
func (m *Name) XXX_Size() int {
	return xxx_messageInfo_Name.Size(m)
}
func (m *Name) XXX_DiscardUnknown() {
	xxx_messageInfo_Name.DiscardUnknown(m)
}

var xxx_messageInfo_Name proto.InternalMessageInfo

func (m *Name) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Msg1 struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Time                 int64    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Msg1) Reset()         { *m = Msg1{} }
func (m *Msg1) String() string { return proto.CompactTextString(m) }
func (*Msg1) ProtoMessage()    {}
func (*Msg1) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e8d50a95d34bb2, []int{1}
}

func (m *Msg1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Msg1.Unmarshal(m, b)
}
func (m *Msg1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Msg1.Marshal(b, m, deterministic)
}
func (m *Msg1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg1.Merge(m, src)
}
func (m *Msg1) XXX_Size() int {
	return xxx_messageInfo_Msg1.Size(m)
}
func (m *Msg1) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg1.DiscardUnknown(m)
}

var xxx_messageInfo_Msg1 proto.InternalMessageInfo

func (m *Msg1) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Msg1) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type Msg2 struct {
	Message              *Msg1    `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Msg2) Reset()         { *m = Msg2{} }
func (m *Msg2) String() string { return proto.CompactTextString(m) }
func (*Msg2) ProtoMessage()    {}
func (*Msg2) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e8d50a95d34bb2, []int{2}
}

func (m *Msg2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Msg2.Unmarshal(m, b)
}
func (m *Msg2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Msg2.Marshal(b, m, deterministic)
}
func (m *Msg2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg2.Merge(m, src)
}
func (m *Msg2) XXX_Size() int {
	return xxx_messageInfo_Msg2.Size(m)
}
func (m *Msg2) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg2.DiscardUnknown(m)
}

var xxx_messageInfo_Msg2 proto.InternalMessageInfo

func (m *Msg2) GetMessage() *Msg1 {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*Name)(nil), "proto.Name")
	proto.RegisterType((*Msg1)(nil), "proto.Msg1")
	proto.RegisterType((*Msg2)(nil), "proto.Msg2")
}

func init() { proto.RegisterFile("ServeRoute.proto", fileDescriptor_99e8d50a95d34bb2) }

var fileDescriptor_99e8d50a95d34bb2 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x08, 0x4e, 0x2d, 0x2a,
	0x4b, 0x0d, 0xca, 0x2f, 0x2d, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53,
	0x4a, 0x52, 0x5c, 0x2c, 0x7e, 0x89, 0xb9, 0xa9, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92, 0x09, 0x17, 0x8b, 0x6f, 0x71, 0xba,
	0xa1, 0x90, 0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71, 0x62, 0x3a, 0x4c, 0x1a, 0xc6, 0x05, 0xe9,
	0x2a, 0xc9, 0xcc, 0x4d, 0x95, 0x60, 0x52, 0x60, 0xd4, 0x60, 0x0e, 0x02, 0xb3, 0x95, 0x74, 0xc1,
	0xba, 0x8c, 0x84, 0x54, 0x51, 0x75, 0x71, 0x1b, 0x71, 0x43, 0x6c, 0xd6, 0x03, 0x99, 0x09, 0x37,
	0xc2, 0x28, 0x82, 0x8b, 0x0b, 0xe1, 0x36, 0x21, 0x15, 0x2e, 0x36, 0x30, 0xcf, 0x50, 0x08, 0xa6,
	0x1a, 0xe4, 0x3a, 0x29, 0x64, 0xad, 0x4a, 0x0c, 0x70, 0x55, 0x46, 0x38, 0x55, 0x19, 0x29, 0x31,
	0x24, 0xb1, 0x81, 0x79, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x07, 0x73, 0x5e, 0xfc,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServeRouteClient is the client API for ServeRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServeRouteClient interface {
	Serve1(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Msg1, error)
	Serve2(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Msg2, error)
}

type serveRouteClient struct {
	cc *grpc.ClientConn
}

func NewServeRouteClient(cc *grpc.ClientConn) ServeRouteClient {
	return &serveRouteClient{cc}
}

func (c *serveRouteClient) Serve1(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Msg1, error) {
	out := new(Msg1)
	err := c.cc.Invoke(ctx, "/proto.ServeRoute/Serve1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serveRouteClient) Serve2(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Msg2, error) {
	out := new(Msg2)
	err := c.cc.Invoke(ctx, "/proto.ServeRoute/Serve2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServeRouteServer is the server API for ServeRoute service.
type ServeRouteServer interface {
	Serve1(context.Context, *Name) (*Msg1, error)
	Serve2(context.Context, *Name) (*Msg2, error)
}

// UnimplementedServeRouteServer can be embedded to have forward compatible implementations.
type UnimplementedServeRouteServer struct {
}

func (*UnimplementedServeRouteServer) Serve1(ctx context.Context, req *Name) (*Msg1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Serve1 not implemented")
}
func (*UnimplementedServeRouteServer) Serve2(ctx context.Context, req *Name) (*Msg2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Serve2 not implemented")
}

func RegisterServeRouteServer(s *grpc.Server, srv ServeRouteServer) {
	s.RegisterService(&_ServeRoute_serviceDesc, srv)
}

func _ServeRoute_Serve1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServeRouteServer).Serve1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServeRoute/Serve1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServeRouteServer).Serve1(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServeRoute_Serve2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServeRouteServer).Serve2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServeRoute/Serve2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServeRouteServer).Serve2(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServeRoute_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServeRoute",
	HandlerType: (*ServeRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Serve1",
			Handler:    _ServeRoute_Serve1_Handler,
		},
		{
			MethodName: "Serve2",
			Handler:    _ServeRoute_Serve2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ServeRoute.proto",
}
